// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TypesGenerator/TypesGeneratorV3/SchemaCollector should collect schemas for one-password-events API 1`] = `
Map {
  "UnnamedSchema1" => {
    "oneOf": [
      {
        "$ref": "#/components/schemas/Cursor",
      },
      {
        "$ref": "#/components/schemas/ResetCursor",
      },
    ],
  },
  "UnnamedSchema2" => {
    "oneOf": [
      {
        "$ref": "#/components/schemas/Cursor",
      },
      {
        "$ref": "#/components/schemas/ResetCursor",
      },
    ],
  },
  "Introspection" => {
    "properties": {
      "Features": {
        "example": [
          "itemusages",
          "signinattempts",
        ],
        "items": {
          "type": "string",
        },
        "type": "array",
      },
      "IssuedAt": {
        "$ref": "#/components/schemas/DateTimeRFC3339",
      },
      "UUID": {
        "type": "string",
      },
    },
    "type": "object",
  },
  "Error" => {
    "properties": {
      "Error": {
        "properties": {
          "Message": {
            "description": "The error message.",
            "type": "string",
          },
        },
        "type": "object",
      },
    },
    "type": "object",
  },
  "ItemUsageItems" => {
    "allOf": [
      {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/ItemUsage",
            },
            "type": "array",
          },
        },
      },
      {
        "$ref": "#/components/schemas/CursorCollection",
      },
    ],
    "description": "An object wrapping cursor properties and a list of items usages",
  },
  "SignInAttemptItems" => {
    "allOf": [
      {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/SignInAttempt",
            },
            "type": "array",
          },
        },
      },
      {
        "$ref": "#/components/schemas/CursorCollection",
      },
    ],
    "description": "An object wrapping cursor properties and a list of sign-in attempts",
  },
  "Cursor" => {
    "description": "Cursor",
    "properties": {
      "cursor": {
        "description": "Cursor to fetch more data if available or continue the polling process if required",
        "example": "aGVsbG8hIGlzIGl0IG1lIHlvdSBhcmUgbG9va2luZyBmb3IK",
        "type": "string",
      },
    },
  },
  "ResetCursor" => {
    "description": "Reset cursor",
    "properties": {
      "end_time": {
        "$ref": "#/components/schemas/DateTimeRFC3339",
      },
      "limit": {
        "maximum": 1000,
        "minimum": 1,
        "type": "number",
      },
      "start_time": {
        "$ref": "#/components/schemas/DateTimeRFC3339",
      },
    },
  },
  "AuxillarySchema1" => {
    "example": [
      "itemusages",
      "signinattempts",
    ],
    "items": {
      "type": "string",
    },
    "type": "array",
  },
  "DateTimeRFC3339" => {
    "example": "2020-06-11T16:32:50-03:00",
    "format": "date-time",
    "type": "string",
  },
  "AuxillarySchema2" => {
    "type": "string",
  },
  "AuxillarySchema3" => {
    "properties": {
      "Message": {
        "description": "The error message.",
        "type": "string",
      },
    },
    "type": "object",
  },
  "AuxillarySchema4" => {
    "properties": {
      "items": {
        "items": {
          "$ref": "#/components/schemas/ItemUsage",
        },
        "type": "array",
      },
    },
  },
  "CursorCollection" => {
    "allOf": [
      {
        "$ref": "#/components/schemas/Cursor",
      },
      {
        "properties": {
          "has_more": {
            "description": "Whether there may still be more data to fetch using the returned cursor. If true, the subsequent request could still be empty.",
            "type": "boolean",
          },
        },
      },
    ],
    "description": "Common cursor properties for collection responses",
  },
  "AuxillarySchema5" => {
    "properties": {
      "items": {
        "items": {
          "$ref": "#/components/schemas/SignInAttempt",
        },
        "type": "array",
      },
    },
  },
  "AuxillarySchema6" => {
    "description": "Cursor to fetch more data if available or continue the polling process if required",
    "example": "aGVsbG8hIGlzIGl0IG1lIHlvdSBhcmUgbG9va2luZyBmb3IK",
    "type": "string",
  },
  "AuxillarySchema7" => {
    "maximum": 1000,
    "minimum": 1,
    "type": "number",
  },
  "AuxillarySchema8" => {
    "type": "string",
  },
  "AuxillarySchema9" => {
    "description": "The error message.",
    "type": "string",
  },
  "AuxillarySchema10" => {
    "items": {
      "$ref": "#/components/schemas/ItemUsage",
    },
    "type": "array",
  },
  "AuxillarySchema11" => {
    "properties": {
      "has_more": {
        "description": "Whether there may still be more data to fetch using the returned cursor. If true, the subsequent request could still be empty.",
        "type": "boolean",
      },
    },
  },
  "AuxillarySchema12" => {
    "items": {
      "$ref": "#/components/schemas/SignInAttempt",
    },
    "type": "array",
  },
  "ItemUsage" => {
    "description": "A single item usage object",
    "properties": {
      "action": {
        "$ref": "#/components/schemas/Action",
      },
      "client": {
        "$ref": "#/components/schemas/Client",
      },
      "item_uuid": {
        "$ref": "#/components/schemas/UUID",
      },
      "timestamp": {
        "$ref": "#/components/schemas/DateTimeRFC3339",
      },
      "used_version": {
        "type": "integer",
      },
      "user": {
        "$ref": "#/components/schemas/User",
      },
      "uuid": {
        "$ref": "#/components/schemas/UUID",
      },
      "vault_uuid": {
        "$ref": "#/components/schemas/UUID",
      },
    },
  },
  "AuxillarySchema13" => {
    "description": "Whether there may still be more data to fetch using the returned cursor. If true, the subsequent request could still be empty.",
    "type": "boolean",
  },
  "SignInAttempt" => {
    "description": "A single sign-in attempt object",
    "properties": {
      "category": {
        "enum": [
          "success",
          "credentials_failed",
          "mfa_failed",
          "modern_version_failed",
          "firewall_failed",
          "firewall_reported_success",
        ],
        "example": "firewall_failed",
        "type": "string",
      },
      "client": {
        "$ref": "#/components/schemas/Client",
      },
      "country": {
        "description": "Country ISO Code",
        "example": "France",
        "type": "string",
      },
      "details": {
        "$ref": "#/components/schemas/Details",
      },
      "session_uuid": {
        "$ref": "#/components/schemas/UUID",
      },
      "target_user": {
        "$ref": "#/components/schemas/User",
      },
      "timestamp": {
        "$ref": "#/components/schemas/DateTimeRFC3339",
      },
      "type": {
        "enum": [
          "credentials_ok",
          "mfa_ok",
          "password_secret_bad",
          "mfa_missing",
          "totp_disabled",
          "totp_bad",
          "totp_timeout",
          "u2f_disabled",
          "u2f_bad",
          "u2f_timout",
          "duo_disabled",
          "duo_bad",
          "duo_timeout",
          "duo_native_bad",
          "platform_secret_disabled",
          "platform_secret_bad",
          "platform_secret_proxy",
          "code_disabled",
          "code_bad",
          "code_timeout",
          "ip_blocked",
          "continent_blocked",
          "country_blocked",
          "anonymous_blocked",
          "all_blocked",
          "modern_version_missing",
          "modern_version_old",
        ],
        "example": "continent_blocked",
        "type": "string",
      },
      "uuid": {
        "$ref": "#/components/schemas/UUID",
      },
    },
  },
  "Action" => {},
  "Client" => {
    "description": "Metadata gathered about the client",
    "properties": {
      "app_name": {
        "example": "1Password Extension",
        "type": "string",
      },
      "app_version": {
        "example": "20127",
        "type": "string",
      },
      "ip_address": {
        "example": "13.227.95.22",
        "type": "string",
      },
      "os_name": {
        "example": "MacOSX",
        "type": "string",
      },
      "os_version": {
        "example": "10.15.6",
        "type": "string",
      },
      "platform_name": {
        "example": "Chrome",
        "type": "string",
      },
      "platform_version": {
        "description": "Depending on the platform used, this can be the version of the browser that the client extension is installed, the model of computer that the native application is installed or the machine's CPU version that the CLI was installed",
        "type": "string",
      },
    },
  },
  "UUID" => {
    "example": "56YE2TYN2VFYRLNSHKPW5NVT5E",
    "type": "string",
  },
  "AuxillarySchema14" => {
    "type": "integer",
  },
  "User" => {
    "description": "User object",
    "properties": {
      "email": {
        "format": "email",
        "type": "string",
      },
      "name": {
        "description": "Full name",
        "example": "Jack O'Neill",
        "type": "string",
      },
      "uuid": {
        "$ref": "#/components/schemas/UUID",
      },
    },
  },
  "AuxillarySchema15" => {
    "enum": [
      "success",
      "credentials_failed",
      "mfa_failed",
      "modern_version_failed",
      "firewall_failed",
      "firewall_reported_success",
    ],
    "example": "firewall_failed",
    "type": "string",
  },
  "AuxillarySchema16" => {
    "description": "Country ISO Code",
    "example": "France",
    "type": "string",
  },
  "Details" => {
    "description": "Additional information about the sign-in attempt",
    "properties": {
      "value": {
        "description": "For firewall prevented sign-ins, the value is the chosen continent, country, etc. that blocked the sign-in attempt",
        "example": "Europe",
        "type": "string",
      },
    },
  },
  "AuxillarySchema17" => {
    "enum": [
      "credentials_ok",
      "mfa_ok",
      "password_secret_bad",
      "mfa_missing",
      "totp_disabled",
      "totp_bad",
      "totp_timeout",
      "u2f_disabled",
      "u2f_bad",
      "u2f_timout",
      "duo_disabled",
      "duo_bad",
      "duo_timeout",
      "duo_native_bad",
      "platform_secret_disabled",
      "platform_secret_bad",
      "platform_secret_proxy",
      "code_disabled",
      "code_bad",
      "code_timeout",
      "ip_blocked",
      "continent_blocked",
      "country_blocked",
      "anonymous_blocked",
      "all_blocked",
      "modern_version_missing",
      "modern_version_old",
    ],
    "example": "continent_blocked",
    "type": "string",
  },
  "AuxillarySchema18" => {
    "example": "1Password Extension",
    "type": "string",
  },
  "AuxillarySchema19" => {
    "example": "20127",
    "type": "string",
  },
  "AuxillarySchema20" => {
    "example": "13.227.95.22",
    "type": "string",
  },
  "AuxillarySchema21" => {
    "example": "MacOSX",
    "type": "string",
  },
  "AuxillarySchema22" => {
    "example": "10.15.6",
    "type": "string",
  },
  "AuxillarySchema23" => {
    "example": "Chrome",
    "type": "string",
  },
  "AuxillarySchema24" => {
    "description": "Depending on the platform used, this can be the version of the browser that the client extension is installed, the model of computer that the native application is installed or the machine's CPU version that the CLI was installed",
    "type": "string",
  },
  "AuxillarySchema25" => {
    "format": "email",
    "type": "string",
  },
  "AuxillarySchema26" => {
    "description": "Full name",
    "example": "Jack O'Neill",
    "type": "string",
  },
  "AuxillarySchema27" => {
    "description": "For firewall prevented sign-ins, the value is the chosen continent, country, etc. that blocked the sign-in attempt",
    "example": "Europe",
    "type": "string",
  },
}
`;

exports[`TypesGenerator/TypesGeneratorV3/SchemaCollector should collect schemas for petstore3 API 1`] = `
Map {
  "Pet" => {
    "properties": {
      "category": {
        "$ref": "#/components/schemas/Category",
      },
      "id": {
        "example": 10,
        "format": "int64",
        "type": "integer",
      },
      "name": {
        "example": "doggie",
        "type": "string",
      },
      "photoUrls": {
        "items": {
          "type": "string",
          "xml": {
            "name": "photoUrl",
          },
        },
        "type": "array",
        "xml": {
          "wrapped": true,
        },
      },
      "status": {
        "description": "pet status in the store",
        "enum": [
          "available",
          "pending",
          "sold",
        ],
        "type": "string",
      },
      "tags": {
        "items": {
          "$ref": "#/components/schemas/Tag",
        },
        "type": "array",
        "xml": {
          "wrapped": true,
        },
      },
    },
    "required": [
      "name",
      "photoUrls",
    ],
    "type": "object",
    "xml": {
      "name": "pet",
    },
  },
  "UnnamedSchema1" => {
    "format": "binary",
    "type": "string",
  },
  "Order" => {
    "properties": {
      "complete": {
        "type": "boolean",
      },
      "id": {
        "example": 10,
        "format": "int64",
        "type": "integer",
      },
      "petId": {
        "example": 198772,
        "format": "int64",
        "type": "integer",
      },
      "quantity": {
        "example": 7,
        "format": "int32",
        "type": "integer",
      },
      "shipDate": {
        "format": "date-time",
        "type": "string",
      },
      "status": {
        "description": "Order Status",
        "enum": [
          "placed",
          "approved",
          "delivered",
        ],
        "example": "approved",
        "type": "string",
      },
    },
    "type": "object",
    "xml": {
      "name": "order",
    },
  },
  "User" => {
    "properties": {
      "email": {
        "example": "john@email.com",
        "type": "string",
      },
      "firstName": {
        "example": "John",
        "type": "string",
      },
      "id": {
        "example": 10,
        "format": "int64",
        "type": "integer",
      },
      "lastName": {
        "example": "James",
        "type": "string",
      },
      "password": {
        "example": "12345",
        "type": "string",
      },
      "phone": {
        "example": "12345",
        "type": "string",
      },
      "userStatus": {
        "description": "User Status",
        "example": 1,
        "format": "int32",
        "type": "integer",
      },
      "username": {
        "example": "theUser",
        "type": "string",
      },
    },
    "type": "object",
    "xml": {
      "name": "user",
    },
  },
  "UnnamedSchema2" => {
    "items": {
      "$ref": "#/components/schemas/User",
    },
    "type": "array",
  },
  "UnnamedSchema3" => {
    "items": {
      "$ref": "#/components/schemas/Pet",
    },
    "type": "array",
  },
  "UnnamedSchema4" => {
    "items": {
      "$ref": "#/components/schemas/Pet",
    },
    "type": "array",
  },
  "UnnamedSchema5" => {
    "items": {
      "$ref": "#/components/schemas/Pet",
    },
    "type": "array",
  },
  "UnnamedSchema6" => {
    "items": {
      "$ref": "#/components/schemas/Pet",
    },
    "type": "array",
  },
  "ApiResponse" => {
    "properties": {
      "code": {
        "format": "int32",
        "type": "integer",
      },
      "message": {
        "type": "string",
      },
      "type": {
        "type": "string",
      },
    },
    "type": "object",
    "xml": {
      "name": "##default",
    },
  },
  "UnnamedSchema7" => {
    "additionalProperties": {
      "format": "int32",
      "type": "integer",
    },
    "type": "object",
  },
  "UnnamedSchema8" => {
    "type": "string",
  },
  "UnnamedSchema9" => {
    "type": "string",
  },
  "AuxillarySchema1" => {
    "example": 10,
    "format": "int64",
    "type": "integer",
  },
  "AuxillarySchema2" => {
    "example": "doggie",
    "type": "string",
  },
  "Category" => {
    "properties": {
      "id": {
        "example": 1,
        "format": "int64",
        "type": "integer",
      },
      "name": {
        "example": "Dogs",
        "type": "string",
      },
    },
    "type": "object",
    "xml": {
      "name": "category",
    },
  },
  "AuxillarySchema3" => {
    "items": {
      "type": "string",
      "xml": {
        "name": "photoUrl",
      },
    },
    "type": "array",
    "xml": {
      "wrapped": true,
    },
  },
  "AuxillarySchema4" => {
    "items": {
      "$ref": "#/components/schemas/Tag",
    },
    "type": "array",
    "xml": {
      "wrapped": true,
    },
  },
  "AuxillarySchema5" => {
    "description": "pet status in the store",
    "enum": [
      "available",
      "pending",
      "sold",
    ],
    "type": "string",
  },
  "AuxillarySchema6" => {
    "example": 10,
    "format": "int64",
    "type": "integer",
  },
  "AuxillarySchema7" => {
    "example": 198772,
    "format": "int64",
    "type": "integer",
  },
  "AuxillarySchema8" => {
    "example": 7,
    "format": "int32",
    "type": "integer",
  },
  "AuxillarySchema9" => {
    "format": "date-time",
    "type": "string",
  },
  "AuxillarySchema10" => {
    "description": "Order Status",
    "enum": [
      "placed",
      "approved",
      "delivered",
    ],
    "example": "approved",
    "type": "string",
  },
  "AuxillarySchema11" => {
    "type": "boolean",
  },
  "AuxillarySchema12" => {
    "example": 10,
    "format": "int64",
    "type": "integer",
  },
  "AuxillarySchema13" => {
    "example": "theUser",
    "type": "string",
  },
  "AuxillarySchema14" => {
    "example": "John",
    "type": "string",
  },
  "AuxillarySchema15" => {
    "example": "James",
    "type": "string",
  },
  "AuxillarySchema16" => {
    "example": "john@email.com",
    "type": "string",
  },
  "AuxillarySchema17" => {
    "example": "12345",
    "type": "string",
  },
  "AuxillarySchema18" => {
    "example": "12345",
    "type": "string",
  },
  "AuxillarySchema19" => {
    "description": "User Status",
    "example": 1,
    "format": "int32",
    "type": "integer",
  },
  "AuxillarySchema20" => {
    "format": "int32",
    "type": "integer",
  },
  "AuxillarySchema21" => {
    "type": "string",
  },
  "AuxillarySchema22" => {
    "type": "string",
  },
  "AuxillarySchema23" => {
    "format": "int32",
    "type": "integer",
  },
  "AuxillarySchema24" => {
    "example": 1,
    "format": "int64",
    "type": "integer",
  },
  "AuxillarySchema25" => {
    "example": "Dogs",
    "type": "string",
  },
  "AuxillarySchema26" => {
    "type": "string",
    "xml": {
      "name": "photoUrl",
    },
  },
  "Tag" => {
    "properties": {
      "id": {
        "format": "int64",
        "type": "integer",
      },
      "name": {
        "type": "string",
      },
    },
    "type": "object",
    "xml": {
      "name": "tag",
    },
  },
  "AuxillarySchema27" => {
    "format": "int64",
    "type": "integer",
  },
  "AuxillarySchema28" => {
    "type": "string",
  },
}
`;
